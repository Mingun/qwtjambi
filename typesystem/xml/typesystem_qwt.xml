<?xml version="1.0" encoding="utf-8" ?>

<typesystem package="com.trolltech.qt.qwt"
            default-superclass="com.trolltech.qt.QtJambiObject">

    <load-typesystem name=":/trolltech/generator/typesystem_core.txt" generate="no" />
    <load-typesystem name=":/trolltech/generator/typesystem_gui.txt" generate="no" />
    <load-typesystem name=":/trolltech/generator/typesystem_svg.txt" generate="no" />
    <load-typesystem name="typesystem/xml/typesystem_suppress_warnings.xml" generate="no" />

    <!-- TODO: может быть long? -->
    <primitive-type name="size_t" java-name="int" jni-name="jint" preferred-conversion="no" />

    <!-- namespace все равно пустой -->
    <rejection class="Qwt"/>

    <!-- ======================================================================================= -->
    <!-- Типы-ссылки (при передаче передаются ссылки) -->
    <!-- ======================================================================================= -->
    <object-type name="QwtAbstractScaleDraw">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="scaleMap()const" remove="all" />

        <modify-function signature="drawBackbone(QPainter*)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawLabel(QPainter*,double)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawTick(QPainter*,double,double)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="draw(QPainter*,QPalette)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtAlphaColorMap" />
    <object-type name="QwtColorMap" />
    <object-type name="QwtCurveFitter" />
    <object-type name="QwtLegend">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="contentsWidget()const" remove="all" />
    </object-type>
    <object-type name="QwtLegendItem" />
    <object-type name="QwtLegendItemManager">
        <modify-function signature="drawLegendIdentifier(QPainter*,QRectF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtLinearColorMap" />
    <object-type name="QwtLinearScaleEngine" />
    <object-type name="QwtLog10ScaleEngine" />
    <object-type name="QwtMatrixRasterData" />
    <object-type name="QwtPlot">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="axisScaleDiv(int)const" remove="all" />
        <modify-function signature="axisScaleDraw(int)const" remove="all" />
        <modify-function signature="axisScaleEngine(int)const" remove="all" />
        <modify-function signature="axisWidget(int)const" remove="all" />
        <modify-function signature="canvas()const" remove="all" />
        <modify-function signature="legend()const" remove="all" />
        <modify-function signature="plotLayout()const" remove="all" />
        <modify-function signature="titleLabel()const" remove="all" />

        <modify-function signature="drawCanvas(QPainter*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <!--<modify-function signature="drawItems(QPainter*,const QRectF&amp;,const QwtScaleMap[axisCnt])const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>-->
        
        <!-- Если QwtPlot::LegendPosition != QwtPlot::ExternalLegend, то владение переходит к QwtPlot
        <modify-function signature="insertLegend(QwtLegend*,QwtPlot::LegendPosition,double)">
            <modify-argument index="1">
                <define-ownership class="java | shell" owner="java | c++ | default" />
            </modify-argument>
        </modify-function>-->
    </object-type>
    <object-type name="QwtPlotAbstractSeriesItem">
        <modify-function signature="QwtPlotAbstractSeriesItem(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawSeries(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotCanvas">
        <modify-function signature="plot()const" remove="all" />

        <modify-function signature="drawBorder(QPainter*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawFocusIndicator(QPainter*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotCurve" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotCurve">
        <modify-function signature="QwtPlotCurve(QString)" remove="all" />
<!--        <modify-function signature="QwtPlotCurve(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>-->
        <modify-function signature="drawCurve(QPainter*,int,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawLegendIdentifier(QPainter*,QRectF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawSeries(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="fillCurve(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,QPolygonF&amp;)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawSymbols(QPainter*,QwtSymbol,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>

<!--        <extra-includes>
            <include file-name="com.trolltech.qt.core.QPoint" location="java"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem_qwt-java.java" quote-after-line="class QwtPlotCurve___" quote-before-line="}// class"/>
        </inject-code>

        <inject-code class="native">
extern "C" JNIEXPORT void JNICALL QTJAMBI_FUNCTION_PREFIX(Java_com_trolltech_qt_qwt_QwtPlotCurve_add_1private)
(JNIEnv *__jni_env, jobject, jlong nativeId, jint x, jint y)
{
    Q_UNUSED(__jni_env);
    QwtPlotCurve *curve = (QwtPlotCurve *) qtjambi_from_jlong(nativeId);
    if (!curve)
        return;
    *curve &lt;&lt; QPoint(x, y);
}
        </inject-code>-->
    </object-type>
    <object-type name="QwtPlotGrid" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotGrid" />
    <object-type name="QwtPlotHistogram" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotHistogram">
        <modify-function signature="QwtPlotHistogram(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawColumn(QPainter*,QwtColumnRect,QwtIntervalSample)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotIntervalCurve" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotIntervalCurve">
        <modify-function signature="QwtPlotIntervalCurve(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawSymbols(QPainter*,QwtIntervalSymbol,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawTube(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotItem" polymorphic-base="yes" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotItem">
        <modify-function signature="draw(QPainter*,QwtScaleMap,QwtScaleMap,QRectF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotLayout" />
    <object-type name="QwtPlotMarker" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotMarker">
        <modify-function signature="drawLabel(QPainter*,QRectF,QPointF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawLines(QPainter*,QRectF,QPointF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotRasterItem">
        <modify-function signature="QwtPlotRasterItem(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotScaleItem" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotScale">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="scaleDraw()const" remove="all" />
    </object-type>
    <object-type name="QwtPlotSpectroCurve" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotSpectroCurve">
        <modify-function signature="QwtPlotSpectroCurve(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawDots(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotSpectrogram" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotSpectrogram">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="data()const" remove="all" />
        
        <modify-function signature="QwtPlotSpectrogram(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawContourLines(QPainter*,QwtScaleMap,QwtScaleMap,QMap&lt;double,QPolygonF&gt;)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotSvgItem" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotSVG">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="renderer()const" remove="all" />

        <modify-function signature="QwtPlotSvgItem(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtRasterData" />
    <object-type name="QwtScaleDraw" />
    <object-type name="QwtScaleEngine" />
    <object-type name="QwtScaleWidget">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="scaleDraw()const" remove="all" />
    </object-type>
    <object-type name="QwtTextEngine">
        <modify-function signature="draw(QPainter*,QRectF,int,QString)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtTextLabel">
        <modify-function signature="drawContents(QPainter*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawText(QPainter*,QRect)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>

    <!-- ======================================================================================= -->
    <!-- Типы-значения (при передаче копируются) -->
    <!-- ======================================================================================= -->
    <value-type name="QwtColumnRect" />
    <value-type name="QwtColumnSymbol">
        <modify-function signature="draw(QPainter*,QwtColumnRect)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </value-type>
    <value-type name="QwtInterval">
        <modify-function signature="operator&amp;=(QwtInterval)" remove="all" />
        <modify-function signature="operator|=(QwtInterval)" remove="all" />
        <modify-function signature="operator|=(double)" remove="all" />
    </value-type>
    <value-type name="QwtIntervalSample" />
    <value-type name="QwtIntervalSymbol">
        <modify-function signature="draw(QPainter*,Qt::Orientation,QPointF,QPointF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </value-type>
    <value-type name="QwtPoint3D">
        <modify-function signature="rx()" remove="all" />
        <modify-function signature="ry()" remove="all" />
        <modify-function signature="rz()" remove="all" />
    </value-type>
    <value-type name="QwtScaleDiv" />
    <value-type name="QwtScaleMap">
        <modify-function signature="operator=(QwtScaleMap)" remove="all" />
    </value-type>
    <value-type name="QwtScaleTransformation">
        <custom-constructor>return copy-&gt;copy();</custom-constructor>
        <custom-destructor>delete copy;</custom-destructor>
    </value-type>
    <value-type name="QwtSymbol">
    <!--TODO: второй параметр - массив точек-->
        <modify-function signature="drawSymbols(QPainter*,const QPointF*,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </value-type>
    <value-type name="QwtText">
        <modify-function signature="operator=(QwtText)" remove="all" />
        <modify-function signature="QwtText(QString, QwtText::TextFormat)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
    </value-type>

    <!-- ======================================================================================= -->
    <!-- Интерфейсы -->
    <!-- ======================================================================================= -->
    <interface-type name="QwtPlotDict" />

    <!-- ======================================================================================= -->
    <!-- Перечисления -->
    <!-- ======================================================================================= -->
    <enum-type name="QwtAbstractScaleDraw::ScaleComponent" flags="QwtAbstractScaleDraw::ScaleComponents" />
    
    <enum-type name="QwtColorMap::Format" />
    
    <enum-type name="QwtColumnRect::Direction" />

    <enum-type name="QwtColumnSymbol::FrameStyle" />
    <enum-type name="QwtColumnSymbol::Style" extensible="yes" />

    <enum-type name="QwtInterval::BorderFlag" flags="QwtInterval::BorderFlags" />

    <enum-type name="QwtIntervalSymbol::Style" extensible="yes" />

    <enum-type name="QwtLegend::LegendItemMode" />

    <enum-type name="QwtLinearColorMap::Mode" />

    <enum-type name="QwtMatrixRasterData::ResampleMode" />
    
    <enum-type name="QwtPlot::Axis">
        <reject-enum-value name="axisCnt" />
    </enum-type>
    <enum-type name="QwtPlot::LegendPosition" />
    
    <enum-type name="QwtPlotCanvas::FocusIndicator" />
    <enum-type name="QwtPlotCanvas::PaintAttribute" flags="QwtPlotCanvas::PaintAttributes" />
 
    <enum-type name="QwtPlotCurve::CurveAttribute" flags="QwtPlotCurve::CurveAttributes" />
    <enum-type name="QwtPlotCurve::CurveStyle" extensible="yes" />
    <enum-type name="QwtPlotCurve::LegendAttribute" flags="QwtPlotCurve::LegendAttributes" />
    <enum-type name="QwtPlotCurve::PaintAttribute" flags="QwtPlotCurve::PaintAttributes" />

    <enum-type name="QwtPlotHistogram::HistogramStyle" extensible="yes" />

    <enum-type name="QwtPlotIntervalCurve::CurveStyle" extensible="yes" />
    <enum-type name="QwtPlotIntervalCurve::PaintAttribute" flags="QwtPlotIntervalCurve::PaintAttributes" />

    <enum-type name="QwtPlotItem::ItemAttribute" flags="QwtPlotItem::ItemAttributes" />
    <enum-type name="QwtPlotItem::RenderHint" flags="QwtPlotItem::RenderHints" />
    <enum-type name="QwtPlotItem::RttiValues" extensible="yes" />

    <enum-type name="QwtPlotLayout::Option" flags="QwtPlotLayout::Options" />

    <enum-type name="QwtPlotMarker::LineStyle" />

    <enum-type name="QwtPlotRasterItem::CachePolicy" />
    <enum-type name="QwtPlotRasterItem::PaintAttribute" flags="QwtPlotRasterItem::PaintAttributes" />

    <enum-type name="QwtPlotSpectroCurve::PaintAttribute" flags="QwtPlotSpectroCurve::PaintAttributes" />
    
    <enum-type name="QwtPlotSpectrogram::DisplayMode" flags="QwtPlotSpectrogram::DisplayModes" />

    <enum-type name="QwtRasterData::ConrecFlag" flags="QwtRasterData::ConrecFlags" />

    <enum-type name="QwtScaleDiv::TickType" />

    <enum-type name="QwtScaleDraw::Alignment" />

    <enum-type name="QwtScaleTransformation::Type" extensible="yes" />

    <enum-type name="QwtScaleEngine::Attribute" flags="QwtScaleEngine::Attributes" />

    <enum-type name="QwtScaleWidget::LayoutFlag" flags="QwtScaleWidget::LayoutFlags" />

    <enum-type name="QwtSymbol::Style" extensible="yes" />

    <enum-type name="QwtText::LayoutAttribute" flags="QwtText::LayoutAttributes" />
    <enum-type name="QwtText::PaintAttribute" flags="QwtText::PaintAttributes" />
    <enum-type name="QwtText::TextFormat" extensible="yes" />
 
    <!-- ======================================================================================= -->
    <!-- C++ шаблоны -->
    <!-- ======================================================================================= -->
    <value-type name="QwtPlotSeriesItem" generate="no">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="data()const" remove="all" />
        <!-- TODO: Временное решение, эти функции нельзя удалять, а то невозможно будет задать данные -->
        <modify-function signature="data()" remove="all" />
        <modify-function signature="setData(QwtSeriesData*)" remove="all" />

        <!-- Конструкторы генерируются дважды, вероятно, из-за шаблона, поэтому удаляем лишние. -->
        <!--<modify-function signature="QwtPlotSeriesItem(QString)" remove="all" />
        <modify-function signature="QwtPlotSeriesItem(QwtText)" remove="all" />-->
    </value-type>
    <!--<value-type name="QwtPlotSeriesItemGeneric" java-name="QwtPlotSeriesItem" generic-class="yes">
        <modify-function signature="QwtPlotSeriesItemGeneric(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
    </value-type>-->
    <value-type name="QwtSeriesData" generate="no" />
    <!--<value-type name="QwtSeriesDataGeneric" java-name="QwtSeriesData" generic-class="yes" />-->
    <value-type name="QwtArraySeriesData" generate="no" />
    <!--<value-type name="QwtArraySeriesDataGeneric" java-name="QwtArraySeriesData" generic-class="yes" />-->

    <!-- ======================================================================================= -->
    <!-- Подавление известных предупреждений -->
    <!-- ======================================================================================= -->
    <suppress-warning text="Rejected enum has no alternative...: QwtPlot::axisCnt" />
    <!-- namespace все равно пустой -->
    <!--<suppress-warning text="namespace 'Qwt' does not have a type entry" />-->
    <!-- Эти три класса абстрактные, а значит, не могут быть инстанцированы и определять их тип нет надобности -->
    <suppress-warning text="class 'QwtPlotAbstractSeriesItem' inherits from polymorphic class 'QwtPlotItem', but has no polymorphic id set" />
    <suppress-warning text="class 'QwtPlotRasterItem' inherits from polymorphic class 'QwtPlotItem', but has no polymorphic id set" />
    <suppress-warning text="class 'QwtPlotSeriesItem' inherits from polymorphic class 'QwtPlotItem', but has no polymorphic id set" />


    <!-- ======================================================================================= -->
    <!-- Временное подавление предупреждений, необходимо проанализировать их более тщательно -->
    <!-- ======================================================================================= -->
    <!--<suppress-warning text="namespace 'com.trolltech.qt.gui*is not declared" />-->
    <!--<suppress-warning text="namespace 'com.trolltech.qt.core*is not declared" />-->
    <suppress-warning text="Class '*' has equals operators but no qHash() function. Hashcode of objects will consistently be 0." />

<!--
    <object-type name="QwtAbstractScale" />
    <object-type name="QwtAbstractSlider" />
    <object-type name="QwtAlphaColorMap" />
    <object-type name="QwtAnalogClock" />
    <object-type name="QwtArraySeriesData" />
    <object-type name="QwtArrowButton" />
    <object-type name="QwtCPointerData" />
    <object-type name="QwtClipper" />
    <object-type name="QwtCompass" />
    <object-type name="QwtCompassMagnetNeedle" />
    <object-type name="QwtCompassRose" />
    <object-type name="QwtCompassWindArrow" />
    <object-type name="QwtCounter" />
    <object-type name="QwtDial" />
    <object-type name="QwtDialNeedle" />
    <object-type name="QwtDialScaleDraw" />
    <object-type name="QwtDialSimpleNeedle" />
    <object-type name="QwtDoubleRange" />
    <object-type name="QwtDynGridLayout" />
    <object-type name="QwtEventPattern" />
    <object-type name="QwtIntervalSeriesData" />
    <object-type name="QwtKnob" />
    <object-type name="QwtLinearColorMap" />
    <object-type name="QwtMagnifier" />
    <object-type name="QwtNullPaintDevice" />
    <object-type name="QwtPainter" />
    <object-type name="QwtPanner" />
    <object-type name="QwtPicker" />
    <object-type name="QwtPickerClickPointMachine" />
    <object-type name="QwtPickerClickRectMachine" />
    <object-type name="QwtPickerDragPointMachine" />
    <object-type name="QwtPickerDragRectMachine" />
    <object-type name="QwtPickerMachine" />
    <object-type name="QwtPickerPolygonMachine" />
    <object-type name="QwtPickerTrackerMachine" />
    <object-type name="QwtPlainTextEngine" />
    <object-type name="QwtPlotDirectPainter" />
    <object-type name="QwtPlotMagnifier" />
    <object-type name="QwtPlotPanner" />
    <object-type name="QwtPlotPicker" />
    <object-type name="QwtPlotRenderer" />
    <object-type name="QwtPlotRescaler" />
    <object-type name="QwtPlotZoomer" />
    <object-type name="QwtPoint3DSeriesData" />
    <object-type name="QwtPointArrayData" />
    <object-type name="QwtPointPolar" />
    <object-type name="QwtPointSeriesData" />
    <object-type name="QwtRichTextEngine" />
    <object-type name="QwtRoundScaleDraw" />
    <object-type name="QwtSamplingThread" />
    <object-type name="QwtScaleArithmetic" />
    <object-type name="QwtSetSample" />
    <object-type name="QwtSetSeriesData" />
    <object-type name="QwtSimpleCompassRose" />
    <object-type name="QwtSlider" />
    <object-type name="QwtSplineCurveFitter" />
    <object-type name="QwtSyntheticPointData" />
    <object-type name="QwtSystemClock" />
    <object-type name="QwtThermo" />
    <object-type name="QwtWeedingCurveFitter" />
    <object-type name="QwtWheel" />-->
</typesystem>
