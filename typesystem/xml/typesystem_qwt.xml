<?xml version="1.0" encoding="utf-8" ?>

<typesystem package="com.trolltech.qt.qwt"
            default-superclass="com.trolltech.qt.QtJambiObject">

    <load-typesystem name=":/trolltech/generator/typesystem_core.txt" generate="no" />
    <load-typesystem name=":/trolltech/generator/typesystem_gui.txt" generate="no" />
    <load-typesystem name=":/trolltech/generator/typesystem_svg.txt" generate="no" />
    <load-typesystem name="typesystem/xml/typesystem_suppress_warnings.xml" generate="no" />
    <load-typesystem name="typesystem/xml/typesystem_qwt_widgets.xml" generate="yes" />

    <template name="add_data_and_setData.native">
        <import-file name="typesystem/cpp/typesystem_qwt-native.cpp" quote-after-line="//{ class QwtPlotSeriesItem__" quote-before-line="//} class"/>
    </template>
    <template name="add_data_and_setData.java">
        <import-file name="typesystem/java/typesystem_qwt-java.java" quote-after-line="class QwtPlotSeriesItem__" quote-before-line="}// class"/>
    </template>
    <!-- Конвертация массив Java в пару параметров (указатель,число) -->
    <template name="qwt.T*,int_from_T[]">
        <insert-template name="gui.convert_object_array_from_java">
            <replace from="%EXTRA" to=""/>
            <replace from="%CONVERSION_FUNCTION" to="qtjambi_to_object"/>
        </insert-template>
    </template>

    <primitive-type name="size_t" java-name="int" jni-name="jint" preferred-conversion="no" />

    <!-- namespace все равно пустой -->
    <rejection class="Qwt"/>
    <!-- В Java этот класс потерял свой смысл -->
    <rejection class="QwtCPointerData" />

    <!-- ======================================================================================= -->
    <!-- Типы-ссылки (при передаче передаются ссылки) -->
    <!-- ======================================================================================= -->
    <object-type name="QwtAbstractScaleDraw">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="scaleMap()const" remove="all" />

        <modify-function signature="drawBackbone(QPainter*)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawLabel(QPainter*,double)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawTick(QPainter*,double,double)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="draw(QPainter*,QPalette)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>

        <modify-function signature="setTransformation(QwtScaleTransformation*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtAlphaColorMap">
        <modify-function signature="QwtAlphaColorMap(QColor)">
            <modify-argument index="1">
                <replace-default-expression with="com.trolltech.qt.gui.QColor.gray"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtColorMap" />
    <object-type name="QwtColumnSymbol">
        <modify-function signature="draw(QPainter*,QwtColumnRect)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtClipper" />
    <object-type name="QwtDynGridLayout">
        <modify-function signature="addItem(QLayoutItem*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtIntervalSymbol">
        <modify-function signature="operator=(QwtIntervalSymbol)" remove="all" />
        <modify-function signature="draw(QPainter*,Qt::Orientation,QPointF,QPointF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_qwt-java.java" quote-after-line="class QwtSymbol__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QwtLegend">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="contentsWidget()const" remove="all" />

        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_qwt-java.java" quote-after-line="class QwtLegend__" quote-before-line="}// class"/>
        </inject-code>

        <modify-function signature="insert(const QwtLegendItemManager*,QWidget*)">
            <modify-argument index="1"><reference-count action="ignore"/></modify-argument>
            <inject-code class="java" position="end">
                <argument-map index="1" meta-name="%1"/>
                <argument-map index="2" meta-name="%2"/>
                if (%2 == null)
                  __rcWidgetsForItemManager.remove(%1);
                else
                  __rcWidgetsForItemManager.put(%1,%2);
            </inject-code>
        </modify-function>
        <modify-function signature="remove(const QwtLegendItemManager*)">
            <modify-argument index="1"><reference-count action="ignore"/></modify-argument>
            <inject-code class="java" position="end">
                <argument-map index="1" meta-name="%1"/>
                if (__rcWidgetsForItemManager.containsKey(%1)) __rcWidgetsForItemManager.remove(%1);
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QwtLegendItem" />
    <object-type name="QwtLegendItemManager">
        <modify-function signature="drawLegendIdentifier(QPainter*,QRectF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtLinearColorMap" />
    <object-type name="QwtLinearScaleEngine" />
    <object-type name="QwtLog10ScaleEngine" />
    <object-type name="QwtMagnifier">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="parentWidget()const" remove="all" />

        <modify-function signature="widgetKeyPressEvent(QKeyEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetKeyReleaseEvent(QKeyEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMouseMoveEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMousePressEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMouseReleaseEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetWheelEvent(QWheelEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtMatrixRasterData" />
    <object-type name="QwtNullPaintDevice">
        <modify-function signature="drawLines(const QLineF*,int)">
            <modify-argument index="1">
                <replace-type modified-type="com.trolltech.qt.gui.QLineF[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QLineF",
                                                           "com/trolltech/qt/gui/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QLineF"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawLines(const QLine*,int)">
            <modify-argument index="1">
                <replace-type modified-type="com.trolltech.qt.gui.QLine[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QLine",
                                                           "com/trolltech/qt/gui/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QLine"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawPoints(const QPointF*,int)">
            <modify-argument index="1">
                <replace-type modified-type="com.trolltech.qt.core.QPointF[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QPointF",
                                                           "com/trolltech/qt/core/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QPointF"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawPoints(const QPoint*,int)">
            <modify-argument index="1">
                <replace-type modified-type="com.trolltech.qt.core.QPoint[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QPoint",
                                                           "com/trolltech/qt/core/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QPoint"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawPolygon(const QPointF*,int,QPaintEngine::PolygonDrawMode)">
            <modify-argument index="1">
                <replace-type modified-type="com.trolltech.qt.core.QPointF[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QPointF",
                                                           "com/trolltech/qt/core/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QPointF"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawPolygon(const QPoint*,int,QPaintEngine::PolygonDrawMode)">
            <modify-argument index="1">
                <replace-type modified-type="com.trolltech.qt.core.QPoint[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QPoint",
                                                           "com/trolltech/qt/core/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QPoint"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawRects(const QRectF*,int)">
            <modify-argument index="1">
                <replace-type modified-type="com.trolltech.qt.core.QRectF[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QRectF",
                                                           "com/trolltech/qt/core/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QRectF"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawRects(const QRect*,int)">
            <modify-argument index="1">
                <replace-type modified-type="com.trolltech.qt.core.QRect[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QRect",
                                                           "com/trolltech/qt/core/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QRect"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPainter">
        <modify-function signature="drawPolyline(QPainter*,const QPointF*,int)">
            <modify-argument index="1" invalidate-after-use="yes"/>
            <modify-argument index="2">
                <replace-type modified-type="com.trolltech.qt.core.QPointF[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %2,
                                                           "QPointF",
                                                           "com/trolltech/qt/core/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QPointF"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPanner">
        <!-- Функции с такими названиями уже есть в QWidget -->
        <modify-function signature="cursor()const" rename="pannerCursor" />
        <modify-function signature="isEnabled()const" rename="isPannerEnabled" />
        <modify-function signature="setCursor(QCursor)" rename="setPannerCursor" />
        <modify-function signature="setEnabled(bool)" rename="setPannerEnabled" />

        <modify-function signature="widgetKeyPressEvent(QKeyEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetKeyReleaseEvent(QKeyEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMouseMoveEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMousePressEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMouseReleaseEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPicker">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="parentWidget()const" remove="all" />
        <modify-function signature="stateMachine()const" remove="all" />

        <modify-function signature="drawRubberBand(QPainter*)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawTracker(QPainter*)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="transition(const QEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetEnterEvent(QEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetKeyPressEvent(QKeyEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetKeyReleaseEvent(QKeyEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetLeaveEvent(QEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMouseDoubleClickEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMouseMoveEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMousePressEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetMouseReleaseEvent(QMouseEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="widgetWheelEvent(QWheelEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>

        <modify-function signature="setStateMachine(QwtPickerMachine*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </object-type>
    <!-- Для компиляции этих классов необходим патч генератора, иначе генерируется код приведения void* к const QwtEventPattern&) -->
    <object-type name="QwtPickerClickPointMachine" />
    <object-type name="QwtPickerClickRectMachine" />
    <object-type name="QwtPickerDragPointMachine" />
    <object-type name="QwtPickerDragRectMachine" />
    <object-type name="QwtPickerMachine">
        <modify-function signature="transition(QwtEventPattern,const QEvent*)">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPickerPolygonMachine" />
    <object-type name="QwtPickerTrackerMachine" />
    <!-- Эффект от патча заканчивается здесь -->
    <object-type name="QwtPlainTextEngine" />
    <object-type name="QwtPlot">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="axisScaleDiv(int)const" remove="all" />
        <modify-function signature="axisScaleDraw(int)const" remove="all" />
        <modify-function signature="axisScaleEngine(int)const" remove="all" />
        <modify-function signature="axisWidget(int)const" remove="all" />
        <modify-function signature="canvas()const" remove="all" />
        <modify-function signature="legend()const" remove="all" />
        <modify-function signature="plotLayout()const" remove="all" />
        <modify-function signature="titleLabel()const" remove="all" />

        <modify-function signature="drawCanvas(QPainter*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <!--<modify-function signature="drawItems(QPainter*,QRectF,const QwtScaleMap[axisCnt])const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>-->
        <modify-function signature="setAxisScaleDraw(int,QwtScaleDraw*)">
            <modify-argument index="2">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setAxisScaleEngine(int,QwtScaleEngine*)">
            <modify-argument index="2">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
        <!-- Если QwtPlot::LegendPosition != QwtPlot::ExternalLegend, то владение переходит к QwtPlot.
        Для реализации этого поведения пишем код биндинга вручную -->
        <modify-function signature="insertLegend(QwtLegend*,QwtPlot::LegendPosition,double)" remove="java" />

        <!-- Заменяем int на перечисление Axis -->
        <modify-function signature="axisScaleDiv(int)" access="private" rename="axisScaleDiv_private" />
        <!--<modify-function signature="axisAutoScale(int)const" remove="java" />
        <modify-function signature="axisEnabled(int)const" remove="java" />
        <modify-function signature="axisFont(int)const" remove="java" />
        <modify-function signature="axisInterval(int)const" remove="java" />
        <modify-function signature="axisMaxMajor(int)const" remove="java" />
        <modify-function signature="axisMaxMinor(int)const" remove="java" />
        <modify-function signature="axisScaleDiv(int)" remove="java" />
        <modify-function signature="axisScaleDraw(int)" remove="java" />
        <modify-function signature="axisScaleEngine(int)" remove="java" />
        <modify-function signature="axisStepSize(int)const" remove="java" />
        <modify-function signature="axisTitle(int)const" remove="java" />
        <modify-function signature="axisWidget(int)" remove="java" />
        <modify-function signature="canvasMap(int)const" remove="java" />
        <modify-function signature="enableAxis(int,bool)" remove="java" />
        <modify-function signature="invTransform(int,int)const" remove="java" />
        <modify-function signature="setAxisAutoScale(int,bool)" remove="java" />
        <modify-function signature="setAxisFont(int,QFont)" remove="java" />
        <modify-function signature="setAxisLabelAlignment(int,QFlags&lt;Qt::AlignmentFlag&gt;)" remove="java" />
        <modify-function signature="setAxisLabelRotation(int,double)" remove="java" />
        <modify-function signature="setAxisMaxMajor(int,int)" remove="java" />
        <modify-function signature="setAxisMaxMinor(int,int)" remove="java" />
        <modify-function signature="setAxisScale(int,double,double,double)" remove="java" />
        <modify-function signature="setAxisScaleDiv(int,QwtScaleDiv)" remove="java" />
        <modify-function signature="setAxisScaleDraw(int,QwtScaleDraw*)" remove="java" />
        <modify-function signature="setAxisScaleEngine(int,QwtScaleEngine*)" remove="java" />
        <modify-function signature="setAxisTitle(int,QwtText)" remove="java" />
        <modify-function signature="setAxisTitle(int,QString)" remove="java" />
        <modify-function signature="transform(int,double)const" remove="java" />-->
        <inject-code class="native">
            <import-file name="typesystem/cpp/typesystem_qwt-native.cpp" quote-after-line="//{ class QwtPlot__" quote-before-line="//} class"/>
        </inject-code>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_qwt-java.java" quote-after-line="class QwtPlot__" quote-before-line="}// class"/>
        </inject-code>

    </object-type>
    <object-type name="QwtPlotAbstractSeriesItem">
        <modify-function signature="QwtPlotAbstractSeriesItem(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawSeries(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotCanvas">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="plot()const" remove="all" />

        <modify-function signature="drawBorder(QPainter*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawFocusIndicator(QPainter*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>

        <modify-function signature="backingStore()const">
            <modify-argument index="return">
                <replace-type modified-type="com.trolltech.qt.gui.QPixmap" />
                <conversion-rule class="native">
                    jobject %out = qtjambi_from_object(__jni_env, %in, "QPixmap", "com/trolltech/qt/gui/", true);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotCurve" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotCurve">
    <!--<object-type name="QwtPlotCurve" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotCurve" default-superclass="QwtPlotSeriesItem&lt;QPointF&gt;">-->
        <modify-function signature="QwtPlotCurve(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawCurve(QPainter*,int,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawLegendIdentifier(QPainter*,QRectF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawSeries(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="fillCurve(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,QPolygonF&amp;)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawSymbols(QPainter*,QwtSymbol,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>

        <modify-function signature="setSamples(QVector&lt;QPointF&gt;)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcSamples"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="setCurveFitter(QwtCurveFitter*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setSymbol(const QwtSymbol*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
        <!-- Добавляем функции data и setData, удаленные в шаблонном предке, так как генератор генерирует некорректный код -->
        <inject-code class="native">
            <insert-template name="add_data_and_setData.native">
                <replace from="%QTCLASS" to="QwtPlotCurve"/>
                <replace from="%JAVACLASS" to="QwtSeriesData_QPointF"/>
                <replace from="%TYPE"  to="QPointF"/>
            </insert-template>
        </inject-code>
        <inject-code class="java">
            <insert-template name="add_data_and_setData.java">
                <replace from="QwtSeriesData&lt;T&gt;" to="QwtSeriesData_QPointF"/>
            </insert-template>
            <import-file name="typesystem/java/typesystem_qwt-java.java" quote-after-line="class QwtPlotCurve__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QwtPlotDirectPainter" />
    <object-type name="QwtPlotGrid" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotGrid">
        <modify-function signature="draw(QPainter*,QwtScaleMap,QwtScaleMap,QRectF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotHistogram" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotHistogram">
        <modify-function signature="QwtPlotHistogram(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawColumn(QPainter*,QwtColumnRect,QwtIntervalSample)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="setSymbol(const QwtColumnSymbol*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>

        <!-- Добавляем функции data и setData, удаленные в шаблонном предке, так как генератор генерирует некорректный код -->
        <inject-code class="native">
            <insert-template name="add_data_and_setData.native">
                <replace from="%QTCLASS" to="QwtPlotHistogram"/>
                <replace from="%JAVACLASS" to="QwtSeriesData_QwtIntervalSample"/>
                <replace from="%TYPE"  to="QwtIntervalSample"/>
            </insert-template>
        </inject-code>
        <inject-code class="java">
            <insert-template name="add_data_and_setData.java">
                <replace from="QwtSeriesData&lt;T&gt;" to="QwtSeriesData_QwtIntervalSample"/>
            </insert-template>
        </inject-code>

        <modify-function signature="setSamples(QVector&lt;QwtIntervalSample&gt;)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcSamples"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotIntervalCurve" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotIntervalCurve">
        <modify-function signature="QwtPlotIntervalCurve(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawSymbols(QPainter*,QwtIntervalSymbol,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawTube(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="setSymbol(const QwtIntervalSymbol*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>

        <!-- Добавляем функции data и setData, удаленные в шаблонном предке, так как генератор генерирует некорректный код -->
        <inject-code class="native">
            <insert-template name="add_data_and_setData.native">
                <replace from="%QTCLASS" to="QwtPlotIntervalCurve"/>
                <replace from="%JAVACLASS" to="QwtSeriesData_QwtIntervalSample"/>
                <replace from="%TYPE"  to="QwtIntervalSample"/>
            </insert-template>
        </inject-code>
        <inject-code class="java">
            <insert-template name="add_data_and_setData.java">
                <replace from="QwtSeriesData&lt;T&gt;" to="QwtSeriesData_QwtIntervalSample"/>
            </insert-template>
        </inject-code>

        <modify-function signature="setSamples(QVector&lt;QwtIntervalSample&gt;)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcSamples"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotItem" polymorphic-base="yes" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotItem">
        <modify-function signature="draw(QPainter*,QwtScaleMap,QwtScaleMap,QRectF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="attach(QwtPlot*)">
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null)
                    disableGarbageCollection();
                else
                    reenableGarbageCollection();
            </inject-code>
        </modify-function>

        <inject-code class="java">
            public final void detach() {
                attach(null);
            }
        </inject-code>
    </object-type>
    <object-type name="QwtPlotLayout" />
    <object-type name="QwtPlotMagnifier">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="plot()const" remove="all" />
        <modify-function signature="canvas()const" remove="all" />
    </object-type>
    <object-type name="QwtPlotMarker" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotMarker">
        <modify-function signature="drawLabel(QPainter*,QRectF,QPointF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawLines(QPainter*,QRectF,QPointF)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="setSymbol(const QwtSymbol*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotPanner">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="plot()const" remove="all" />
        <modify-function signature="canvas()const" remove="all" />
    </object-type>
    <object-type name="QwtPlotPicker">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="plot()const" remove="all" />
        <modify-function signature="canvas()const" remove="all" />

        <modify-function signature="selected(QPointF)" rename="selectedPoint" />
        <modify-function signature="selected(QRectF)" rename="selectedRect" />
        <modify-function signature="selected(QVector&lt;QPointF&gt;)" rename="selectedList" />
    </object-type>
    <object-type name="QwtPlotRasterItem">
        <modify-function signature="QwtPlotRasterItem(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotRenderer">
        <!-- без патча генератор генерирует ошибочный код (не хватает разыменовывания указателя для приведения его к ссылке) -->
        <!--<modify-function signature="renderTo(QwtPlot*,QPaintDevice&amp;)const" remove="all" />-->

        <modify-function signature="render(QwtPlot*,QPainter*,QRectF)const">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="renderCanvas(const QwtPlot*,QPainter*,QRectF,const QwtScaleMap*)const">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="renderLegend(const QwtPlot*,QPainter*,QRectF)const">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="renderLegendItem(const QwtPlot*,QPainter*,const QWidget*,QRectF)const">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="renderScale(const QwtPlot*,QPainter*,int,int,int,int,QRectF)const">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="renderTitle(const QwtPlot*,QPainter*,QRectF)const">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotRescaler">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="plot()const" remove="all" />
        <modify-function signature="canvas()const" remove="all" />

        <modify-function signature="canvasResizeEvent(QResizeEvent*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotScaleItem" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotScale">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="scaleDraw()const" remove="all" />

        <modify-function signature="setScaleDraw(QwtScaleDraw*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotSpectroCurve" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotSpectroCurve">
        <modify-function signature="QwtPlotSpectroCurve(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawDots(QPainter*,QwtScaleMap,QwtScaleMap,QRectF,int,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="setColorMap(QwtColorMap*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>

        <!-- Добавляем функции data и setData, удаленные в шаблонном предке, так как генератор генерирует некорректный код -->
        <inject-code class="native">
            <insert-template name="add_data_and_setData.native">
                <replace from="%QTCLASS" to="QwtPlotSpectroCurve"/>
                <replace from="%JAVACLASS" to="QwtSeriesData_QwtPoint3D"/>
                <replace from="%TYPE"  to="QwtPoint3D"/>
            </insert-template>
        </inject-code>
        <inject-code class="java">
            <insert-template name="add_data_and_setData.java">
                <replace from="QwtSeriesData&lt;T&gt;" to="QwtSeriesData_QwtPoint3D"/>
            </insert-template>
        </inject-code>

        <modify-function signature="setSamples(QVector&lt;QwtPoint3D&gt;)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcSamples"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotSpectrogram" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotSpectrogram">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="data()const" remove="all" />
        
        <modify-function signature="QwtPlotSpectrogram(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="drawContourLines(QPainter*,QwtScaleMap,QwtScaleMap,QMap&lt;double,QPolygonF&gt;)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="setColorMap(QwtColorMap*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(QwtRasterData*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotSvgItem" polymorphic-id-expression="%1->rtti() == QwtPlotItem::Rtti_PlotSVG">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="renderer()const" remove="all" />

        <modify-function signature="QwtPlotSvgItem(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtPlotZoomer" />
    <object-type name="QwtRasterData" />
    <object-type name="QwtRichTextEngine" />
    <object-type name="QwtRoundScaleDraw" />
    <!--TODO: класс наследуется от QThread, который не является QObject-ом в Java и поэтому требуется ручное отображение класса -->
    <object-type name="QwtSamplingThread" default-superclass="com.trolltech.qt.core.QObject" generate="no">
        <!--<inject-code>
            <import-file name="typesystem/java/typesystem_qwt-java.java" quote-after-line="class QwtSamplingThread__" quote-before-line="}// class"/>
        </inject-code>-->
    </object-type>
    <object-type name="QwtScaleArithmetic" />
    <object-type name="QwtScaleDraw" />
    <object-type name="QwtScaleEngine" />
    <object-type name="QwtScaleTransformation">
        <modify-function signature="copy()const" remove="all"/>
        <custom-constructor>return copy-&gt;copy();</custom-constructor>
        <custom-destructor>delete copy;</custom-destructor>
    </object-type>
    <object-type name="QwtScaleWidget">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="scaleDraw()const" remove="all" />

        <modify-function signature="setColorMap(QwtInterval,QwtColorMap*)">
            <modify-argument index="2">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setScaleDraw(QwtScaleDraw*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setScaleDiv(QwtScaleTransformation*,QwtScaleDiv)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QwtSplineCurveFitter">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="spline()const" remove="all" />

        <!--TODO:
        <modify-function signature="setSpline(QwtSpline)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>-->
    </object-type>
    <object-type name="QwtSyntheticPointData" />
    <object-type name="QwtSymbol">
        <modify-function signature="operator=(QwtSymbol)" remove="all" />
        <!-- Второй параметр - массив точек-->
        <modify-function signature="drawSymbols(QPainter*,const QPointF*,int)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
            <modify-argument index="2">
                <replace-type modified-type="com.trolltech.qt.core.QPointF[]" />
                <conversion-rule class="shell">
                    jobjectArray %out = qtjambi_from_array(__jni_env, %in, %3,
                                                           "QPointF",
                                                           "com/trolltech/qt/core/");
                </conversion-rule>
                <conversion-rule class="native">
                    int __length = __jni_env->GetArrayLength((jarray) %in);
                    <insert-template name="qwt.T*,int_from_T[]">
                        <replace from="%CLASSNAME" to="QPointF"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument />
                <conversion-rule class="native">
                    int %out = __length;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_qwt-java.java" quote-after-line="class QwtSymbol__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QwtSystemClock" />
    <object-type name="QwtTextEngine">
        <modify-function signature="draw(QPainter*,QRectF,int,QString)const">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtTextLabel">
        <modify-function signature="drawContents(QPainter*)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="drawText(QPainter*,QRect)">
            <modify-argument index="1" invalidate-after-use="yes"/>
        </modify-function>
    </object-type>
    <object-type name="QwtWeedingCurveFitter" />


    <!-- ======================================================================================= -->
    <!-- Типы-значения (при передаче копируются) -->
    <!-- ======================================================================================= -->
    <value-type name="QwtColumnRect" />
    <value-type name="QwtEventPattern::KeyPattern" />
    <value-type name="QwtEventPattern::MousePattern" />
    <value-type name="QwtInterval">
        <modify-function signature="operator&amp;=(QwtInterval)" remove="all" />
        <modify-function signature="operator|=(QwtInterval)" remove="all" />
        <modify-function signature="operator|=(double)" remove="all" />
    </value-type>
    <value-type name="QwtIntervalSample" />
    <value-type name="QwtIntervalSeriesData" default-superclass="QwtSeriesData_QwtIntervalSample">
        <modify-function signature="QwtIntervalSeriesData(QVector&lt;QwtIntervalSample&gt;)">
            <modify-argument index="1">
                <remove-default-expression />
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            public QwtIntervalSeriesData() {
                this(java.util.Collections.&lt;QwtIntervalSample&gt;emptyList());
            }
        </inject-code>
        <custom-constructor>return new QwtIntervalSeriesData(copy-&gt;samples());</custom-constructor>
        <custom-destructor>delete copy;</custom-destructor>
    </value-type>
    <value-type name="QwtPoint3D">
        <modify-function signature="rx()" remove="all" />
        <modify-function signature="ry()" remove="all" />
        <modify-function signature="rz()" remove="all" />
    </value-type>
    <value-type name="QwtPoint3DSeriesData" default-superclass="QwtSeriesData_QwtPoint3D">
        <modify-function signature="QwtPoint3DSeriesData(QVector&lt;QwtPoint3D&gt;)">
            <modify-argument index="1">
                <remove-default-expression />
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            public QwtPoint3DSeriesData() {
                this(java.util.Collections.&lt;QwtPoint3D&gt;emptyList());
            }
        </inject-code>
        <custom-constructor>return new QwtPoint3DSeriesData(copy-&gt;samples());</custom-constructor>
        <custom-destructor>delete copy;</custom-destructor>
    </value-type>
    <value-type name="QwtPointArrayData">
        <custom-constructor>return new QwtPointArrayData(copy-&gt;xData(), copy-&gt;yData());</custom-constructor>
        <custom-destructor>delete copy;</custom-destructor>
    </value-type>
    <value-type name="QwtPointSeriesData" default-superclass="QwtSeriesData_QPointF">
        <modify-function signature="QwtPointSeriesData(QVector&lt;QPointF&gt;)">
            <modify-argument index="1">
                <remove-default-expression />
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            public QwtPointSeriesData() {
                this(java.util.Collections.&lt;com.trolltech.qt.core.QPointF&gt;emptyList());
            }
        </inject-code>
        <custom-constructor>return new QwtPointSeriesData(copy-&gt;samples());</custom-constructor>
        <custom-destructor>delete copy;</custom-destructor>
    </value-type>
    <value-type name="QwtPointPolar">
        <!-- В Java невозможно предоставить этот API поэтому удаляем -->
        <modify-function signature="rAzimuth()" remove="all" />
        <modify-function signature="rRadius()" remove="all" />
    </value-type>
    <value-type name="QwtScaleDiv" />
    <value-type name="QwtScaleMap">
        <modify-function signature="operator=(QwtScaleMap)" remove="all" />
        <modify-function signature="setTransformation(QwtScaleTransformation*)">
            <modify-argument index="1">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QwtSetSample" />
    <value-type name="QwtSetSeriesData" default-superclass="QwtSeriesData_QwtSetSample">
        <modify-function signature="QwtSetSeriesData(QVector&lt;QwtSetSample&gt;)">
            <modify-argument index="1">
                <remove-default-expression />
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            public QwtSetSeriesData() {
                this(java.util.Collections.&lt;QwtSetSample&gt;emptyList());
            }
        </inject-code>
        <custom-constructor>return new QwtSetSeriesData(copy-&gt;samples());</custom-constructor>
        <custom-destructor>delete copy;</custom-destructor>
    </value-type>
    <value-type name="QwtSpline" />
    <value-type name="QwtText">
        <modify-function signature="operator=(QwtText)" remove="all" />
        <modify-function signature="QwtText(QString, QwtText::TextFormat)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setTextEngine(QwtText::TextFormat,QwtTextEngine*)">
            <modify-argument index="2">
                <define-ownership class="java" owner="c++" />
            </modify-argument>
        </modify-function>
    </value-type>


    <!-- ======================================================================================= -->
    <!-- Интерфейсы -->
    <!-- ======================================================================================= -->
    <interface-type name="QwtCurveFitter" />
    <interface-type name="QwtEventPattern">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="keyPattern()const" remove="all" />
        <modify-function signature="mousePattern()const" remove="all" />

        <modify-function signature="keyMatch(QwtEventPattern::KeyPattern,const QKeyEvent*)const">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
        <modify-function signature="mouseMatch(QwtEventPattern::MousePattern,const QMouseEvent*)const">
            <modify-argument index="2" invalidate-after-use="yes"/>
        </modify-function>
    </interface-type>
    <interface-type name="QwtPlotDict" />


    <!-- ======================================================================================= -->
    <!-- C++ шаблоны -->
    <!-- ======================================================================================= -->
    <value-type name="QwtPlotSeriesItem" generate="no">
        <!-- Удаляем константные функции, которые имеют неконстантные дубликаты, т.к. java не имеет понятия константности -->
        <modify-function signature="data()const" remove="all" />
        <!-- Генератор генерирует некомпилируемый код, поэтому эти функции добавляем вручную -->
        <modify-function signature="data()" remove="all" />
        <modify-function signature="setData(QwtSeriesData*)" remove="all" />
    </value-type>
    <value-type name="QwtPlotSeriesItemGeneric" java-name="QwtPlotSeriesItem" generic-class="yes">
        <modify-function signature="QwtPlotSeriesItemGeneric(QString)">
            <modify-argument index="1">
                <replace-default-expression with="&quot;&quot;"/>
            </modify-argument>
        </modify-function>

        <!-- Добавляем функции data и setData, удаленные в шаблонном предке, так как генератор генерирует некорректный код -->
        <inject-code class="native">
            <insert-template name="add_data_and_setData.native">
                <replace from="%QTCLASS" to="QwtPlotSeriesItem"/>
                <replace from="%JAVACLASS" to="QwtSeriesData"/>
                <replace from="%TYPE"  to="JObjectWrapper"/>
            </insert-template>
        </inject-code>
        <inject-code class="java">
            <insert-template name="add_data_and_setData.java" />
        </inject-code>
    </value-type>
    <object-type name="QwtSeriesData" generate="no" />
    <object-type name="QwtSeriesDataGeneric" java-name="QwtSeriesData" generic-class="yes" />
    <object-type name="QwtArraySeriesData" generate="no" />
    <!-- Дополнительные типы, специализации шаблона 
        QwtSeriesData<QPointF>, 
        QwtSeriesData<QwtPoint3D>, 
        QwtSeriesData<QwtSetSample> и 
        QwtSeriesData<QwtIntervalSample>  -->
    <object-type name="QwtSeriesData_QPointF" />
    <object-type name="QwtSeriesData_QwtPoint3D" />
    <object-type name="QwtSeriesData_QwtSetSample" />
    <object-type name="QwtSeriesData_QwtIntervalSample" />


    <!-- ======================================================================================= -->
    <!-- Перечисления -->
    <!-- ======================================================================================= -->
    <enum-type name="QwtAbstractScaleDraw::ScaleComponent" flags="QwtAbstractScaleDraw::ScaleComponents" />
    
    <enum-type name="QwtColorMap::Format" />
    
    <enum-type name="QwtColumnRect::Direction" />

    <enum-type name="QwtColumnSymbol::FrameStyle" />
    <enum-type name="QwtColumnSymbol::Style" extensible="yes" />

    <enum-type name="QwtEventPattern::KeyPatternCode">
        <reject-enum-value name="KeyPatternCount" />
    </enum-type>
    <enum-type name="QwtEventPattern::MousePatternCode">
        <reject-enum-value name="MousePatternCount" />
    </enum-type>

    <enum-type name="QwtInterval::BorderFlag" flags="QwtInterval::BorderFlags" />

    <enum-type name="QwtIntervalSymbol::Style" extensible="yes" />

    <enum-type name="QwtLegend::LegendItemMode" />

    <enum-type name="QwtLinearColorMap::Mode" />

    <enum-type name="QwtMatrixRasterData::ResampleMode" />

    <enum-type name="QwtPicker::DisplayMode" />
    <enum-type name="QwtPicker::ResizeMode" />
    <enum-type name="QwtPicker::RubberBand" extensible="yes" />

    <enum-type name="QwtPickerMachine::Command" />
    <enum-type name="QwtPickerMachine::SelectionType" />

    <enum-type name="QwtPlot::Axis">
        <reject-enum-value name="axisCnt" />
    </enum-type>
    <enum-type name="QwtPlot::LegendPosition" />

    <enum-type name="QwtPlotDirectPainter::Attribute" flags="QwtPlotDirectPainter::Attributes" />

    <enum-type name="QwtPlotCanvas::FocusIndicator" />
    <enum-type name="QwtPlotCanvas::PaintAttribute" flags="QwtPlotCanvas::PaintAttributes" />
 
    <enum-type name="QwtPlotCurve::CurveAttribute" flags="QwtPlotCurve::CurveAttributes" />
    <enum-type name="QwtPlotCurve::CurveStyle" extensible="yes" />
    <enum-type name="QwtPlotCurve::LegendAttribute" flags="QwtPlotCurve::LegendAttributes" />
    <enum-type name="QwtPlotCurve::PaintAttribute" flags="QwtPlotCurve::PaintAttributes" />

    <enum-type name="QwtPlotHistogram::HistogramStyle" extensible="yes" />

    <enum-type name="QwtPlotIntervalCurve::CurveStyle" extensible="yes" />
    <enum-type name="QwtPlotIntervalCurve::PaintAttribute" flags="QwtPlotIntervalCurve::PaintAttributes" />

    <enum-type name="QwtPlotItem::ItemAttribute" flags="QwtPlotItem::ItemAttributes" />
    <enum-type name="QwtPlotItem::RenderHint" flags="QwtPlotItem::RenderHints" />
    <enum-type name="QwtPlotItem::RttiValues" extensible="yes" />

    <enum-type name="QwtPlotLayout::Option" flags="QwtPlotLayout::Options" />

    <enum-type name="QwtPlotMarker::LineStyle" />

    <enum-type name="QwtPlotRasterItem::CachePolicy" />
    <enum-type name="QwtPlotRasterItem::PaintAttribute" flags="QwtPlotRasterItem::PaintAttributes" />

    <enum-type name="QwtPlotRenderer::DiscardFlag" flags="QwtPlotRenderer::DiscardFlags" />
    <enum-type name="QwtPlotRenderer::LayoutFlag" flags="QwtPlotRenderer::LayoutFlags" />

    <enum-type name="QwtPlotRescaler::ExpandingDirection" />
    <enum-type name="QwtPlotRescaler::RescalePolicy" />

    <enum-type name="QwtPlotSpectroCurve::PaintAttribute" flags="QwtPlotSpectroCurve::PaintAttributes" />
    
    <enum-type name="QwtPlotSpectrogram::DisplayMode" flags="QwtPlotSpectrogram::DisplayModes" />

    <enum-type name="QwtRasterData::ConrecFlag" flags="QwtRasterData::ConrecFlags" />

    <enum-type name="QwtScaleDiv::TickType" />

    <enum-type name="QwtScaleDraw::Alignment" />

    <enum-type name="QwtScaleTransformation::Type" extensible="yes" />

    <enum-type name="QwtScaleEngine::Attribute" flags="QwtScaleEngine::Attributes" />

    <enum-type name="QwtScaleWidget::LayoutFlag" flags="QwtScaleWidget::LayoutFlags" />

    <enum-type name="QwtSpline::SplineType" />

    <enum-type name="QwtSplineCurveFitter::FitMode" />

    <enum-type name="QwtSymbol::Style" extensible="yes" />

    <enum-type name="QwtText::LayoutAttribute" flags="QwtText::LayoutAttributes" />
    <enum-type name="QwtText::PaintAttribute" flags="QwtText::PaintAttributes" />
    <enum-type name="QwtText::TextFormat" extensible="yes" />


    <!-- ======================================================================================= -->
    <!-- Подавление известных предупреждений -->
    <!-- ======================================================================================= -->
    <suppress-warning text="Rejected enum has no alternative...: QwtPlot::axisCnt" />
    <suppress-warning text="Rejected enum has no alternative...: QwtEventPattern*" />
    <!-- Эти три класса абстрактные, а значит, не могут быть инстанцированы и определять их тип нет надобности -->
    <suppress-warning text="class 'QwtPlotAbstractSeriesItem' inherits from polymorphic class 'QwtPlotItem', but has no polymorphic id set" />
    <suppress-warning text="class 'QwtPlotRasterItem' inherits from polymorphic class 'QwtPlotItem', but has no polymorphic id set" />
    <suppress-warning text="class 'QwtPlotSeriesItem' inherits from polymorphic class 'QwtPlotItem', but has no polymorphic id set" />
    <suppress-warning text="private virtual function 'colorIndex*' in 'QwtAlphaColorMap'" />
    <!-- Генератор некорректно обрабатывает передачу массивов с указанной размерностью, особенно,
    если она указана не числом, а именованной константой -->
    <!--<suppress-warning text="skipping function 'QwtPlot::drawItems', unmatched parameter type 'QwtScaleMap const[axisCnt]'" />-->
    <!-- Все компилируется -->
    <suppress-warning text="Object type 'const QwtScaleTransformation' passed as value. Resulting code will not compile." />
    <!-- Эти предупреждения возникают только в Qt части из-за того, что мы не включаем qtjambi_core_hashes.h и qtjambi_gui_qhashes.h -->
    <suppress-warning text="Class '*' has equals operators but no qHash() function. Hashcode of objects will consistently be 0." />

</typesystem>
